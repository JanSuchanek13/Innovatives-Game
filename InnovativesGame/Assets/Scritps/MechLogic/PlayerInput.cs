//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scritps/MechLogic/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""LowerBody"",
            ""id"": ""0112259b-9603-4397-882b-0305482639c2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""675e19a2-c6ad-4c6d-815a-87f3fb432020"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Value"",
                    ""id"": ""9459a4f9-9d3d-4f77-a5d9-e70bb212f5a4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""dde50b36-6cc5-4180-96d9-92ef76eea267"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""65a62b47-8980-4595-886d-c9590e1ee561"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8f1be3e8-eab9-4fd5-abb8-6bf157a270ee"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""24affc2d-0ae7-4ce2-b192-7b3b57630b18"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5744036a-5d50-4ee4-b040-ca34da336bea"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""f2547c0a-3734-45ea-965c-d6d4e74d9417"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""41c24334-b93b-43ec-886d-45a00803c186"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""44d525c2-adb1-4df9-8118-6c798c427fc9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a062fe71-0dd5-4036-9210-3ac4cd6e877a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""314a1e2c-ca8c-4e23-98fa-6a1ca53cde7e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""916b2544-51ef-4fba-9802-534b4cf33472"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7290ccd-674c-4d7d-8c26-4da4059651b7"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffda3ea5-9eda-4778-9011-6bbfa9a3a050"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UpperBody"",
            ""id"": ""51011b84-58ae-42b7-89f4-8ae89c862d63"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""73e37cfc-4f41-4de3-abda-019723af8851"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""27914220-4744-43f9-a1a4-963756120df5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LowerBody
        m_LowerBody = asset.FindActionMap("LowerBody", throwIfNotFound: true);
        m_LowerBody_Move = m_LowerBody.FindAction("Move", throwIfNotFound: true);
        m_LowerBody_Sprint = m_LowerBody.FindAction("Sprint", throwIfNotFound: true);
        // UpperBody
        m_UpperBody = asset.FindActionMap("UpperBody", throwIfNotFound: true);
        m_UpperBody_Newaction = m_UpperBody.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LowerBody
    private readonly InputActionMap m_LowerBody;
    private ILowerBodyActions m_LowerBodyActionsCallbackInterface;
    private readonly InputAction m_LowerBody_Move;
    private readonly InputAction m_LowerBody_Sprint;
    public struct LowerBodyActions
    {
        private @PlayerInput m_Wrapper;
        public LowerBodyActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_LowerBody_Move;
        public InputAction @Sprint => m_Wrapper.m_LowerBody_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_LowerBody; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LowerBodyActions set) { return set.Get(); }
        public void SetCallbacks(ILowerBodyActions instance)
        {
            if (m_Wrapper.m_LowerBodyActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_LowerBodyActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LowerBodyActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LowerBodyActionsCallbackInterface.OnMove;
                @Sprint.started -= m_Wrapper.m_LowerBodyActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_LowerBodyActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_LowerBodyActionsCallbackInterface.OnSprint;
            }
            m_Wrapper.m_LowerBodyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
            }
        }
    }
    public LowerBodyActions @LowerBody => new LowerBodyActions(this);

    // UpperBody
    private readonly InputActionMap m_UpperBody;
    private IUpperBodyActions m_UpperBodyActionsCallbackInterface;
    private readonly InputAction m_UpperBody_Newaction;
    public struct UpperBodyActions
    {
        private @PlayerInput m_Wrapper;
        public UpperBodyActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UpperBody_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UpperBody; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UpperBodyActions set) { return set.Get(); }
        public void SetCallbacks(IUpperBodyActions instance)
        {
            if (m_Wrapper.m_UpperBodyActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_UpperBodyActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_UpperBodyActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_UpperBodyActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_UpperBodyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public UpperBodyActions @UpperBody => new UpperBodyActions(this);
    public interface ILowerBodyActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IUpperBodyActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
